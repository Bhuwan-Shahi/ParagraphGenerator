"Talk is cheap. Show me the code."
"Code is like humor. When you have to explain it, it's bad."
"First, solve the problem. Then, write the code."
"Experience is the name everyone gives to their mistakes."
"In order to understand recursion, one must first understand recursion."
"There are only two hard things in Computer Science: cache invalidation and naming things."
"Programming isn't about what you know; it's about what you can figure out."
"The best error message is the one that never shows up."
"Code never lies, comments sometimes do."
"Programming is the art of telling another human being what one wants the computer to do."
"Simplicity is the ultimate sophistication."
"Make it work, make it right, make it fast."
"The most important single aspect of software development is to be clear about what you are trying to build."
"Good code is its own best documentation."
"Any fool can write code that a computer can understand. Good programmers write code that humans can understand."
"The computer was born to solve problems that did not exist before."
"Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases."
"Walking on water and developing software from a specification are easy if both are frozen."
"Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to produce bigger and better idiots. So far, the universe is winning."
"If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization."
"The trouble with programmers is that you can never tell what a programmer is doing until it's too late."
"Measuring programming progress by lines of code is like measuring aircraft building progress by weight."
"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live."
"Programming is not about typing, it's about thinking."
"The best way to get a project done faster is to start sooner."
"It's not a bug – it's an undocumented feature."
"Real programmers don't comment their code. If it was hard to write, it should be hard to understand."
"There are 10 types of people in the world: those who understand binary and those who don't."
"99 little bugs in the code, 99 little bugs. Take one down, patch it around, 117 little bugs in the code."
"A programmer is someone who solves a problem you didn't know you had in a way you don't understand."
"Programming is like sex: one mistake and you have to support it for the rest of your life."
"To iterate is human, to recurse divine."
"Software and cathedrals are much the same – first we build them, then we pray."
"The most likely way for the world to be destroyed, most experts agree, is by accident. That's where we come in; we're computer professionals. We cause accidents."
"Deleted code is debugged code."
"Documentation is like sex: when it is good, it is very, very good; and when it is bad, it is better than nothing."
"If you think good architecture is expensive, try bad architecture."
"It's harder to read code than to write it."
"The cheapest, fastest, and most reliable components are those that aren't there."
"Premature optimization is the root of all evil."
"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%."
"Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter."
"The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible."
"Simplicity is prerequisite for reliability."
"The purpose of software engineering is to control complexity, not to create it."
"Software engineering is the part of computer science which is too difficult for the computer scientist."
"The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time."
"Adding manpower to a late software project makes it later."
"No matter how slow you are writing clean code, you will always be slower if you make a mess."
"The only way to learn a new programming language is by writing programs in it."
"A language that doesn't affect the way you think about programming is not worth knowing."
"The most important property of a program is whether it accomplishes the intention of its user."
"Program testing can be used to show the presence of bugs, but never to show their absence."
"Beware of bugs in the above code; I have only proved it correct, not tried it."
"Testing shows the presence, not the absence of bugs."
"If debugging is the process of removing software bugs, then programming must be the process of putting them in."
"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."
"Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?"
"The sooner you start to code, the longer the program will take."
"When in doubt, use brute force."
"Controlling complexity is the essence of computer programming."
"The key to performance is elegance, not battalions of special cases."
"Simplicity is the ultimate sophistication, but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better."
"Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can."
"Inside every large program is a small program struggling to get out."
"The function of good software is to make the complex appear to be simple."
"Good software, like wine, takes time."
"There's nothing more permanent than a temporary hack."
"If it doesn't work, it doesn't matter how fast it doesn't work."
"Weeks of coding can save you hours of planning."
"A computer lets you make more mistakes faster than any other invention in human history, with the possible exceptions of handguns and tequila."
"Computers are incredibly fast, accurate, and stupid. Human beings are incredibly slow, inaccurate, and brilliant. Together they are powerful beyond imagination."
"The Internet? We are not interested in it."
"I think there is a world market for maybe five computers."
"Computers in the future may weigh no more than 1.5 tons."
"There is no reason anyone would want a computer in their home."
"640K ought to be enough for anybody."
"Before software can be reusable it first has to be usable."
"The best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly."
"Programs must be written for people to read, and only incidentally for machines to execute."
"Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves."
"Software is a gas; it expands to fill its container."
"The bearing of a child takes nine months, no matter how many women are assigned."
"What one programmer can do in one month, two programmers can do in two months."
"The best thing about a boolean is even if you are wrong, you are only off by a bit."
"Without requirements or design, programming is the art of adding bugs to an empty text file."
"Bad programmers worry about the code. Good programmers worry about data structures and their relationships."
"Smart data structures and dumb code works a lot better than the other way around."
"Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious."
"The programmer's primary weapon in the never-ending battle against slow system is to change the intramodular structure. Our first response should be to reorganize the modules' data structures."
"Algorithms + Data Structures = Programs."
"The structure of a program reflects the structure of the organization that created it."
"The best way to prepare for programming is to write programs, and to study great programs that other people have written."
"Don't worry if it doesn't work right. If everything did, you'd be out of a job."
"Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis."
"There are only two kinds of programming languages: those people always bitch about and those nobody uses."
"PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals."
"Java is to JavaScript what car is to Carpet."
"C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off."
"The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense."
"LISP programmers know the value of everything and the cost of nothing."
"Unix is user friendly. It's just very particular about who its friends are."
"Some people, when confronted with a problem, think 'I know, I'll use regular expressions.' Now they have two problems."
"Perl – The only language that looks the same before and after RSA encryption."
"There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies."
"The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming."
"We build our computer systems the way we build our cities: over time, without a plan, on top of ruins."
"The Internet was done so well that most people think of it as a natural resource like the Pacific Ocean, rather than something that was man-made. When was the last time a technology with a scale like that was so error-free?"
"The computer was born to solve problems that did not exist before. As we have seen, most of these problems were created by the computer industry itself - a sort of self-perpetuating cycle of solutions creating new problems that require new solutions."
"Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to produce bigger and better idiots. So far, the universe is winning, and it's not even close."
"If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization. The analogy isn't perfect, but it highlights the fundamental difference between physical construction and software construction - one has real-world constraints, the other is limited only by imagination and incompetence."
"Walking on water and developing software from a specification are easy if both are frozen. The problem is that in the real world, requirements change like the weather, and unlike frozen water, frozen specifications tend to crack under pressure.
"The trouble with programmers is that you can never tell what a programmer is doing until it's too late. By the time you realize they've been reinventing the wheel for three weeks, they've already moved on to reimplementing the entire axle system."
"Measuring programming progress by lines of code is like measuring aircraft building progress by weight. It completely misses the point of what we're trying to achieve - elegant, efficient solutions that solve real problems with minimal complexity."
"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Because the odds are good that it will be you, six months from now, when you've forgotten everything about what you were thinking when you wrote it."
"Software and cathedrals are much the same – first we build them, then we pray. We pray that they won't fall down, we pray that people will actually use them, and we pray that we'll be able to understand our own work when we need to modify it later."
"The most likely way for the world to be destroyed, most experts agree, is by accident. That's where we come in; we're computer professionals. We cause accidents on a scale that was previously impossible, with ramifications that can ripple across global systems in milliseconds."
"Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter. Programming is a craft that requires practice, intuition, and the ability to think about problems in ways that a computer can understand and execute."
"The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible. Every program is a model of something, and the better the model captures the essential complexity while avoiding accidental complexity, the better the program."
"The purpose of software engineering is to control complexity, not to create it. Yet somehow, in our quest to solve complex problems, we often end up creating systems that are far more complex than the problems they were designed to solve."
"The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time. This isn't a joke - it's a fundamental truth about software development that every programmer learns the hard way."
"Adding manpower to a late software project makes it later. This is because the new team members must be brought up to speed, communication overhead increases exponentially, and the complexity of coordinating multiple people often outweighs the benefit of additional hands."
"No matter how slow you are writing clean code, you will always be slower if you make a mess. Technical debt accumulates interest at a rate that would make loan sharks jealous, and eventually, it will consume your entire development budget."
"A language that doesn't affect the way you think about programming is not worth knowing. Each programming language embodies a different philosophy about how to approach problems, and learning new languages expands your mental toolkit even when you're working in your primary language."
"Program testing can be used to show the presence of bugs, but never to show their absence. Testing is fundamentally about building confidence in your code, not proving its correctness. The absence of evidence is not evidence of absence."
"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it. This is why clarity should always trump cleverness in production code."
"Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it? The corollary is that you should always write code that is simpler than you think you need."
"Controlling complexity is the essence of computer programming. Every decision we make as programmers either adds to or reduces the complexity of our systems. The best programmers are those who consistently choose simplicity over cleverness."
"The key to performance is elegance, not battalions of special cases. Elegant solutions tend to be both faster and more maintainable because they work with the natural flow of the system rather than against it."
"Simplicity is the ultimate sophistication, but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better. Simple solutions look easy to managers who don't understand the effort required to achieve that simplicity."
"Inside every large program is a small program struggling to get out. The challenge is identifying which parts of your system are essential and which are accidental complexity that can be eliminated."
"The function of good software is to make the complex appear to be simple. The best user interfaces hide the complexity of the underlying system, presenting only the essential concepts that users need to accomplish their goals."
"There's nothing more permanent than a temporary hack. What starts as a quick fix to get something working often becomes a load-bearing part of the system that nobody dares to touch. Technical debt has a way of becoming structural debt."
"Weeks of coding can save you hours of planning. This is the programmer's version of being penny-wise and pound-foolish. The time spent understanding the problem and designing a solution is always paid back with interest during implementation."
"A computer lets you make more mistakes faster than any other invention in human history, with the possible exceptions of handguns and tequila. The speed at which we can implement bad ideas has increased exponentially, but our wisdom about what to implement has not kept pace."
"Computers are incredibly fast, accurate, and stupid. Human beings are incredibly slow, inaccurate, and brilliant. Together they are powerful beyond imagination. The art of programming is bridging the gap between human intuition and machine precision."
"Before software can be reusable it first has to be usable. Too many programmers focus on making their code reusable without first making it work correctly for its intended purpose. Generality without utility is just academic exercise."
"The best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. Code is read far more often than it is written, so optimizing for readability is usually more important than optimizing for performance."
"Programs must be written for people to read, and only incidentally for machines to execute. The machine doesn't care what your variable names are or how you structure your code, but the next programmer who has to maintain it certainly will."
"Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves. We've learned to build impressive-looking systems without necessarily understanding the principles of good architecture."
"The bearing of a child takes nine months, no matter how many women are assigned. Some problems have inherent sequential dependencies that cannot be parallelized away, no matter how many resources you throw at them."
"What one programmer can do in one month, two programmers can do in two months. This is the dark side of Brooks' Law - communication overhead and coordination costs can completely eliminate the benefits of additional team members."
"Without requirements or design, programming is the art of adding bugs to an empty text file. Code without purpose is just expensive digital poetry, and not very good poetry at that."
"Bad programmers worry about the code. Good programmers worry about data structures and their relationships. The structure of your data determines the structure of your algorithms, and choosing the right data structures makes complex problems simple."
"Smart data structures and dumb code works a lot better than the other way around. When you have the right data structure, the algorithms often become obvious. When you have the wrong data structure, no amount of clever coding can save you."
"Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious. Data is the heart of the program; everything else is just plumbing."
"The structure of a program reflects the structure of the organization that created it. This is Conway's Law, and it explains why so many software systems have the same dysfunction as the teams that built them."
"The best way to prepare for programming is to write programs, and to study great programs that other people have written. Programming is learned by doing, not by reading about it, but reading great code can teach you techniques that would take years to discover on your own."
"Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis. The ability to think through all the edge cases and handle them gracefully is what separates professional programmers from hobbyists."
"There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult but ultimately more rewarding."
"The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming. Focus on correctness first, then optimize the parts that actually matter."
"We build our computer systems the way we build our cities: over time, without a plan, on top of ruins. The result is systems that work, but nobody fully understands how or why, and everyone is afraid to change anything fundamental for fear of bringing the whole thing down."
"The Internet was done so well that most people think of it as a natural resource like the Pacific Ocean, rather than something that was man-made. When was the last time a technology with a scale like that was so error-free? The Internet's success comes from its simplicity and robustness, not from complexity and features."